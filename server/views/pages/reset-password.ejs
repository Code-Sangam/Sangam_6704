<!-- Reset Password Page -->
<section class="auth-page">
    <div class="container">
        <div class="auth-container">
            <div class="auth-card">
                <div class="auth-header">
                    <div class="auth-logo">
                        <img src="/images/logo.svg" alt="Sangam Logo" class="logo">
                    </div>
                    <h1 class="auth-title">Create New Password</h1>
                    <p class="auth-subtitle">
                        Enter your new password below
                    </p>
                </div>
                
                <form class="auth-form" action="/auth/reset-password/<%= token %>" method="POST" id="reset-form">
                    <div class="form-group">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i>
                            New Password
                        </label>
                        <div class="password-input-container">
                            <input 
                                type="password" 
                                id="password" 
                                name="password" 
                                class="form-input" 
                                placeholder="Enter your new password"
                                required
                                autocomplete="new-password"
                                minlength="8"
                            >
                            <button type="button" class="password-toggle" onclick="togglePassword('password')">
                                <i class="fas fa-eye" id="password-eye"></i>
                            </button>
                        </div>
                        <div class="password-strength" id="password-strength"></div>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">
                            <i class="fas fa-lock"></i>
                            Confirm New Password
                        </label>
                        <div class="password-input-container">
                            <input 
                                type="password" 
                                id="confirmPassword" 
                                name="confirmPassword" 
                                class="form-input" 
                                placeholder="Confirm your new password"
                                required
                                autocomplete="new-password"
                            >
                            <button type="button" class="password-toggle" onclick="togglePassword('confirmPassword')">
                                <i class="fas fa-eye" id="confirmPassword-eye"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="password-requirements">
                        <h4>Password Requirements:</h4>
                        <ul class="requirements-list">
                            <li id="req-length">
                                <i class="fas fa-times"></i>
                                At least 8 characters
                            </li>
                            <li id="req-uppercase">
                                <i class="fas fa-times"></i>
                                One uppercase letter
                            </li>
                            <li id="req-lowercase">
                                <i class="fas fa-times"></i>
                                One lowercase letter
                            </li>
                            <li id="req-number">
                                <i class="fas fa-times"></i>
                                One number
                            </li>
                            <li id="req-special">
                                <i class="fas fa-times"></i>
                                One special character
                            </li>
                        </ul>
                    </div>
                    
                    <button type="submit" class="btn btn-primary btn-full" id="submit-btn">
                        <i class="fas fa-key"></i>
                        Reset Password
                    </button>
                </form>
                
                <div class="auth-footer">
                    <p>Remember your password? 
                        <a href="/auth/login" class="auth-link">Sign in here</a>
                    </p>
                </div>
            </div>
            
            <div class="auth-info">
                <div class="info-content">
                    <h2>Password Security Tips</h2>
                    <div class="security-tips">
                        <div class="tip-item">
                            <i class="fas fa-shield-alt"></i>
                            <div>
                                <h3>Use a Strong Password</h3>
                                <p>Combine uppercase and lowercase letters, numbers, and special characters</p>
                            </div>
                        </div>
                        
                        <div class="tip-item">
                            <i class="fas fa-user-secret"></i>
                            <div>
                                <h3>Keep It Unique</h3>
                                <p>Don't reuse passwords from other accounts or services</p>
                            </div>
                        </div>
                        
                        <div class="tip-item">
                            <i class="fas fa-eye-slash"></i>
                            <div>
                                <h3>Keep It Private</h3>
                                <p>Never share your password with others or write it down</p>
                            </div>
                        </div>
                        
                        <div class="tip-item">
                            <i class="fas fa-sync-alt"></i>
                            <div>
                                <h3>Update Regularly</h3>
                                <p>Change your password periodically for better security</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('reset-form');
    const submitBtn = document.getElementById('submit-btn');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const originalBtnText = submitBtn.innerHTML;
    
    // Form submission handling
    form.addEventListener('submit', function(e) {
        if (!validateForm()) {
            e.preventDefault();
            return;
        }
        
        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Resetting...';
        
        // Re-enable button after 10 seconds as fallback
        setTimeout(() => {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
        }, 10000);
    });
    
    // Real-time password validation
    passwordInput.addEventListener('input', function() {
        updatePasswordStrength(this.value);
        updatePasswordRequirements(this.value);
        clearFieldError(this);
        
        // Check confirmation if it has a value
        if (confirmPasswordInput.value) {
            validatePasswordConfirmation();
        }
    });
    
    confirmPasswordInput.addEventListener('input', function() {
        validatePasswordConfirmation();
        clearFieldError(this);
    });
    
    // Blur validation
    passwordInput.addEventListener('blur', function() {
        validatePassword(this);
    });
    
    confirmPasswordInput.addEventListener('blur', function() {
        validatePasswordConfirmation();
    });
});

function validateForm() {
    const password = document.getElementById('password');
    const confirmPassword = document.getElementById('confirmPassword');
    
    let isValid = true;
    
    if (!validatePassword(password)) {
        isValid = false;
    }
    
    if (!validatePasswordConfirmation()) {
        isValid = false;
    }
    
    return isValid;
}

function validatePassword(field) {
    const password = field.value;
    
    if (!password) {
        showFieldError(field, 'Password is required');
        return false;
    } else if (password.length < 8) {
        showFieldError(field, 'Password must be at least 8 characters long');
        return false;
    } else if (!isPasswordStrong(password)) {
        showFieldError(field, 'Password does not meet security requirements');
        return false;
    } else {
        clearFieldError(field);
        return true;
    }
}

function validatePasswordConfirmation() {
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const field = document.getElementById('confirmPassword');
    
    if (!confirmPassword) {
        showFieldError(field, 'Please confirm your password');
        return false;
    } else if (password !== confirmPassword) {
        showFieldError(field, 'Passwords do not match');
        return false;
    } else {
        clearFieldError(field);
        return true;
    }
}

function isPasswordStrong(password) {
    const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };
    
    return Object.values(requirements).every(req => req);
}

function updatePasswordRequirements(password) {
    const requirements = {
        length: password.length >= 8,
        uppercase: /[A-Z]/.test(password),
        lowercase: /[a-z]/.test(password),
        number: /\d/.test(password),
        special: /[!@#$%^&*(),.?":{}|<>]/.test(password)
    };
    
    Object.keys(requirements).forEach(req => {
        const element = document.getElementById(`req-${req}`);
        const icon = element.querySelector('i');
        
        if (requirements[req]) {
            element.classList.add('met');
            icon.className = 'fas fa-check';
        } else {
            element.classList.remove('met');
            icon.className = 'fas fa-times';
        }
    });
}

function updatePasswordStrength(password) {
    const strengthDiv = document.getElementById('password-strength');
    
    if (!password) {
        strengthDiv.innerHTML = '';
        return;
    }
    
    let strength = 0;
    let feedback = [];
    
    // Length check
    if (password.length >= 8) strength++;
    else feedback.push('At least 8 characters');
    
    // Uppercase check
    if (/[A-Z]/.test(password)) strength++;
    else feedback.push('One uppercase letter');
    
    // Lowercase check
    if (/[a-z]/.test(password)) strength++;
    else feedback.push('One lowercase letter');
    
    // Number check
    if (/\d/.test(password)) strength++;
    else feedback.push('One number');
    
    // Special character check
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;
    else feedback.push('One special character');
    
    const strengthLevels = ['Very Weak', 'Weak', 'Fair', 'Good', 'Strong'];
    const strengthColors = ['#ef4444', '#f59e0b', '#eab308', '#22c55e', '#16a34a'];
    
    const level = Math.min(strength, 4);
    const strengthText = strengthLevels[level];
    const strengthColor = strengthColors[level];
    
    strengthDiv.innerHTML = `
        <div class="strength-bar">
            <div class="strength-fill" style="width: ${(strength / 5) * 100}%; background-color: ${strengthColor};"></div>
        </div>
        <div class="strength-text" style="color: ${strengthColor};">
            Password Strength: ${strengthText}
        </div>
    `;
}

function togglePassword(fieldId) {
    const field = document.getElementById(fieldId);
    const eye = document.getElementById(fieldId + '-eye');
    
    if (field.type === 'password') {
        field.type = 'text';
        eye.className = 'fas fa-eye-slash';
    } else {
        field.type = 'password';
        eye.className = 'fas fa-eye';
    }
}

function showFieldError(field, message) {
    clearFieldError(field);
    
    field.classList.add('error');
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'field-error';
    errorDiv.textContent = message;
    
    field.parentElement.appendChild(errorDiv);
}

function clearFieldError(field) {
    field.classList.remove('error');
    
    const existingError = field.parentElement.querySelector('.field-error');
    if (existingError) {
        existingError.remove();
    }
}
</script>

<style>
.password-requirements {
    background: var(--background-secondary);
    padding: 1.5rem;
    border-radius: var(--radius-lg);
    margin-bottom: 2rem;
}

.password-requirements h4 {
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-size: var(--text-base);
}

.requirements-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.requirements-list li {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
    color: var(--text-secondary);
    font-size: var(--text-sm);
    transition: color var(--transition-fast);
}

.requirements-list li i {
    width: 16px;
    color: var(--error-color);
    transition: color var(--transition-fast);
}

.requirements-list li.met {
    color: var(--success-color);
}

.requirements-list li.met i {
    color: var(--success-color);
}

.password-strength {
    margin-top: 0.5rem;
}

.strength-bar {
    width: 100%;
    height: 4px;
    background: var(--border-color);
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 0.25rem;
}

.strength-fill {
    height: 100%;
    transition: all var(--transition-normal);
}

.strength-text {
    font-size: var(--text-xs);
    font-weight: 500;
}

.security-tips {
    margin-top: 2rem;
}

.tip-item {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    align-items: flex-start;
}

.tip-item i {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    flex-shrink: 0;
}

.tip-item h3 {
    color: white;
    font-size: var(--text-lg);
    margin-bottom: 0.5rem;
}

.tip-item p {
    color: rgba(255, 255, 255, 0.9);
    font-size: var(--text-sm);
    line-height: var(--leading-relaxed);
    margin: 0;
}

.field-error {
    color: var(--error-color);
    font-size: var(--text-sm);
    margin-top: 0.25rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.field-error::before {
    content: '⚠';
    font-size: var(--text-xs);
}

@media (max-width: 768px) {
    .tip-item {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }
    
    .tip-item i {
        margin: 0 auto;
    }
}
</style>